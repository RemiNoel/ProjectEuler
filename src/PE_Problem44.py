# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj|
# is minimised; what is the value of D?
#
'''
    The following equation will be used to find if a number is pentagonal:

            n = (sqrt(24 * x + 1) + 1) // 6

    You can find information about pentagonal numbers at : https://en.wikipedia.org/wiki/Pentagonal_number
'''

from math import sqrt
from time import time


#   To check if it is a pent num, the index n(output) of the pentagonal
#   equation must be a natural number.
def isPentNum(testNum):
    penNumTest = (sqrt(1 + 24 * testNum) + 1) / 6
    return penNumTest == int(penNumTest)


def main():
    lowest = 0
    notFound = True
    k = 1

    while notFound:
        k += 1
        # r = Pk
        # s = Pj

        r = k * (3 * k - 1) // 2

        for j in range(k - 1, 0, -1):
            s = j * (3 * j - 1) // 2
            if isPentNum(r + s) and isPentNum(r - s):
                lowest = r - s
                notFound = False
                break

    print(lowest)


if __name__ == '__main__':
    main()
