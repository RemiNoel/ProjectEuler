# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
#
# Triangle        Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
# Pentagonal      Pn=n(3n−1)/2        1, 5, 12, 22, 35, ...
# Hexagonal       Hn=n(2n−1)      1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.
#
# Find the next triangle number that is also pentagonal and hexagonal.

'''
    The following equation will be used to find if a number is pentagonal:

            n = (sqrt(24 * Pn + 1) + 1) // 6

    You can find information about pentagonal numbers at : https://en.wikipedia.org/wiki/Pentagonal_number
    ###                                                                                                 ###

    The following equation will be used to find if a number is triangular:

            n = (sqrt(8 * Tn + 1) - 1) // 2

    You can find information about hexagonal numbers at : https://en.wikipedia.org/wiki/Triangular_number
    ###                                                                                                 ###

    The following equation will be used to find if a number is hexagonal:

            n = (sqrt(8 * Hn + 1) + 1) // 4

    You can find information about hexagonal numbers at : https://en.wikipedia.org/wiki/Hexagonal_number
'''

from math import sqrt


#   To check if it is a pent num, the index n(output) of the pentagonal
#   equation must be a natural number.
def isPentNum(testNum):
    penNumTest = (sqrt(1 + 24 * testNum) + 1) / 6
    return penNumTest == int(penNumTest)

#   To check if it is a triangle num, the index n(output) of the pentagonal
#   equation must be a natural number.
def isTriNum(testNum):
    triNumTest = (sqrt(1 + 8 * testNum) - 1) / 2
    return triNumTest == int(triNumTest)

#   To check if it is a hexagonal num, the index n(output) of the pentagonal
#   equation must be a natural number.
def isHexaNum(testNum):
    hexaNumTest =  (sqrt(1 + 8 * testNum) + 1) / 4
    return hexaNumTest == int(hexaNumTest)


def main():
    result = 0
    n = 285
    notFound = True

    while notFound:
        n += 1

        triTest = n * (n + 1) // 2
        if isTriNum(triTest):
            if isPentNum(triTest) and isHexaNum(triTest):
                result = triTest
                notFound = False
    print(result)


if __name__ == '__main__':
    main()
